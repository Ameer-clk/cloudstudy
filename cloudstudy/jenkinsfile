pipeline {
    environment {
        REGION='us-east-1'
        CLUSTER='cloudstudycluster'
        AWS_ACCOUNT='098386855668'
        SERVICE_NAME='cloudstudy'
        TASKDEF_NAME='cloudstuydtask'
        TASKDEF_FILE='ecs_task_def.json'
        DESIRED_COUNT=1
        REPOSITORY_NAME='cloudstudy'
        REPOSITORY_URI="${env.AWS_ACCOUNT}.dkr.ecr.${env.REGION}.amazonaws.com/${env.REPOSITORY_NAME}"
        SONARQUBE_ENDPOINT='http://44.204.76.82/'
        SONARQUBE_TOKEN='3a3b5f4c59c29465f5bb034485198d0faa9aea7a'
    }
    agent any
    stages {
        stage('Build') {
            steps {
                sh '''
                    cd cloudstudy/
                    echo "Building the cicd demo ngnix docker image.."
                    docker build -t "${SERVICE_NAME}" .
                '''  
            }
        }
        stage('Test') {
            steps {
                sh '''
                      node {
  stage('SCM') {
    checkout scm
  }
  stage('SonarQube Analysis') {
    def mvn = tool 'Default Maven';
    withSonarQubeEnv() {
      sh "${mvn}/bin/mvn clean verify sonar:sonar -Dsonar.projectKey=cloudstudy"
                '''
            }
        }
        stage('Deploy') {
            steps {
                sh '''
                    cd cloudstudy/
                    echo 'Deploying to Amazon ECS....'
                    docker tag ${SERVICE_NAME}:latest ${REPOSITORY_URI}:latest
                    eval $(aws ecr get-login --no-include-email --region ${REGION})
                    docker push ${REPOSITORY_URI}:latest
                    echo 'Setting desired container count to 0'
                    aws ecs update-service --cluster ${CLUSTER} --service ${SERVICE_NAME} --task-definition ${TASKDEF_NAME} --desired-count 0
                    echo 'Updating task definition'
                    aws ecs register-task-definition --cli-input-json file://${TASKDEF_FILE}
                    echo 'Deploying to ECS Cluster: ${CLUSTER}'
                    aws ecs update-service --cluster ${CLUSTER} --service ${SERVICE_NAME} --task-definition ${TASKDEF_NAME} --desired-count ${DESIRED_COUNT} --force-new-deployment
                '''
            }
        }
    }
}
***JENKINS_SERVER_URL***/job/***JENKINS_JOB_NAME***/build?token=***JENKINS_BUILD_TRIGGER_TOKEN***